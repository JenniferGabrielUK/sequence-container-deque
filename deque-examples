// portfolio-sequence-container-deque.cpp : This file contains the 'main' function. Program execution begins and ends there.
#include <iostream>
#include <deque>
#include <vector>
#include <algorithm>

//template function to display any deque

template <typename T>
void display(const std::deque <T>& d) {
	std::cout << "[ ";
	for (const auto& elem : d)
		std::cout << elem << " ";
	std::cout << "]" << std::endl;
}

void test1() {
	std::cout << "\nTest1=======================" << std::endl;
	//deque intitialization examples
	std::deque <int> deq{ 1,2,3,4,5,6,7,8,9,10};
	display(deq);
	deq = { 2,3,4,5,6,7,8,9,10,11 };
	display(deq);
	std::deque <int> deq1(10, 100);
	display(deq1);
	deq[0] = 100;
	deq1.at(0) = 1000;
	display(deq);
	display(deq1);
}

void test2() {
	//push and pops
	std::cout << "\nTest2========================" << std::endl;
	std::deque<int> deq{ 0,0,0 };
	std::deque<int> deq1{ 0,0,0 };
	std::deque<int> deq3{};
	display(deq);
	//manual push_back.
	deq.push_back(10);
	display(deq);
	deq.push_back(20);
	display(deq);
	deq.push_back(30);
	display(deq);
	deq.push_back(40);
	display(deq);
	deq.push_back(50);
	display(deq);
	deq.push_back(60);
	display(deq);
	deq.push_back(70);
	display(deq);
	deq.push_back(80);
	display(deq);
	deq.push_back(90);
	display(deq);
	std::cout << "Calling for loop..." << std::endl;
	//for loop for push_back increments of 10.
	for (int i{ 1 }; i <= 10; ++i) {
		deq1.push_back(i * 10);
	}
	display(deq1);
	for (int i{ 1 }; i <= 10; ++i) {
		deq3.push_front(i * 100);
		display(deq3);
	}
	//display(deq3);
	for (int i{ 1 }; i <= 10; i++) {
		deq3.pop_back();
		display(deq3);
	}
	for (int i{ 1 }; i <= 10; ++i) {
		deq3.push_front(i * 100);
		display(deq3);
	}
	for (int i{ 1 }; i <= 10; i++) {
		deq3.pop_front();
		display(deq3);
	}
}

void test3() {
	//insert all even numbers into the back of a deque and all
	//odd numbers into the front
	std::cout << "\nTest3======================" << std::endl;
	std::vector<int> vec{ 1,2,3,4,5,6,7,8,9,10 };
	std::deque<int> deq{0};
	display2(vec);
	for (const auto& elem : vec) {
		if (elem % 2 == 0)
			deq.push_back(elem);
		else
			deq.push_front(elem);
	}
	display(deq);
}

void test4() {
	//push front vs back ordering
	std::cout << "\nTest4=======================" << std::endl;
	std::vector <int> vec{ 1,2,3,4,5,6,7,8,9,10 };
	std::deque<int> deq;
	for (const auto& elem : vec) {
		deq.push_front(elem);
	}
	display2(vec);
	display(deq);
	deq.clear();
	for (const auto& elem : vec) {
		deq.push_back(elem);
	}
	display2(vec);
	display(deq);
}

void test5() {
	//same as test4 but using std::copy
	//using iterators and a front_inserter
	std::cout << "\nTest5=======================" << std::endl;
	std::vector<int> vec{ 1,2,3,4,5,6,7,8,9,10 };
	std::deque <int> deq{};
	std::copy(vec.begin(), vec.end(), front_inserter(deq));
	std::cout << "Vec & Deque with front_inserter." << std::endl;
 	display2(vec);
	display(deq);
	deq.clear();
	std::copy(vec.begin(), vec.end(), std::back_inserter(deq));
	std::cout << "Vec & Deque with back_inserter." << std::endl;
	display2(vec);
	display(deq);
}

void test6() {
	std::cout << std::setw(33) << std::left << std::setfill('-') << "\n" << std::endl;
	std::deque<double> deq{ 1.2,2.3,3.4,4.1,5.1,6.1,7.2,8.4,9.3,10 };
	display(deq);
	deq = { 1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2 };
	display(deq);
	std::deque<double> deq_1(10, 100);
	display(deq_1);
	deq[0] = 1;
	deq_1.at(0) = 3.33;
	deq_1.at(1) = 3.44;
	display(deq);
	display(deq_1);
}

int main()
{
	test1();
	test2();
	tets3();
	test4();
	test5();
	test6();
	return 0;
}
